// Mocks generated by Mockito 5.4.6 from annotations
// in chords_app/test/unit/providers/app_data_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:chords_app/models/artist.dart' as _i3;
import 'package:chords_app/models/collection.dart' as _i4;
import 'package:chords_app/models/search_filters.dart' as _i13;
import 'package:chords_app/models/setlist.dart' as _i5;
import 'package:chords_app/models/song.dart' as _i2;
import 'package:chords_app/services/artist_service.dart' as _i14;
import 'package:chords_app/services/cache_service.dart' as _i11;
import 'package:chords_app/services/collection_service.dart' as _i15;
import 'package:chords_app/services/home_section_service.dart' as _i6;
import 'package:chords_app/services/liked_songs_service.dart' as _i10;
import 'package:chords_app/services/offline_service.dart' as _i8;
import 'package:chords_app/services/setlist_service.dart' as _i16;
import 'package:chords_app/services/song_service.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSong_0 extends _i1.SmartFake implements _i2.Song {
  _FakeSong_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeArtist_1 extends _i1.SmartFake implements _i3.Artist {
  _FakeArtist_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCollection_2 extends _i1.SmartFake implements _i4.Collection {
  _FakeCollection_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSetlist_3 extends _i1.SmartFake implements _i5.Setlist {
  _FakeSetlist_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HomeSectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeSectionService extends _i1.Mock
    implements _i6.HomeSectionService {
  MockHomeSectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i6.HomeSection>> getHomeSections({
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getHomeSections, [], {
              #forceRefresh: forceRefresh,
            }),
            returnValue: _i7.Future<List<_i6.HomeSection>>.value(
              <_i6.HomeSection>[],
            ),
          )
          as _i7.Future<List<_i6.HomeSection>>);

  @override
  _i7.Future<void> refreshHomeSectionsInBackground() =>
      (super.noSuchMethod(
            Invocation.method(#refreshHomeSectionsInBackground, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i6.HomeSection>?> getCachedHomeSections({
    bool? checkOnly = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedHomeSections, [], {
              #checkOnly: checkOnly,
            }),
            returnValue: _i7.Future<List<_i6.HomeSection>?>.value(),
          )
          as _i7.Future<List<_i6.HomeSection>?>);

  @override
  _i7.Future<List<dynamic>> getSectionItems(
    String? sectionId,
    _i6.SectionType? type,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getSectionItems, [sectionId, type]),
            returnValue: _i7.Future<List<dynamic>>.value(<dynamic>[]),
          )
          as _i7.Future<List<dynamic>>);
}

/// A class which mocks [OfflineService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineService extends _i1.Mock implements _i8.OfflineService {
  MockOfflineService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isOnline =>
      (super.noSuchMethod(Invocation.getter(#isOnline), returnValue: false)
          as bool);

  @override
  bool get isOffline =>
      (super.noSuchMethod(Invocation.getter(#isOffline), returnValue: false)
          as bool);

  @override
  bool get offlineModeEnabled =>
      (super.noSuchMethod(
            Invocation.getter(#offlineModeEnabled),
            returnValue: false,
          )
          as bool);

  @override
  _i7.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setOfflineModeEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setOfflineModeEnabled, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> cacheSongsForOffline(List<_i2.Song>? songs) =>
      (super.noSuchMethod(
            Invocation.method(#cacheSongsForOffline, [songs]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i2.Song>?> getCachedSongs() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedSongs, []),
            returnValue: _i7.Future<List<_i2.Song>?>.value(),
          )
          as _i7.Future<List<_i2.Song>?>);

  @override
  _i7.Future<void> cacheArtistsForOffline(List<_i3.Artist>? artists) =>
      (super.noSuchMethod(
            Invocation.method(#cacheArtistsForOffline, [artists]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i3.Artist>?> getCachedArtists() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedArtists, []),
            returnValue: _i7.Future<List<_i3.Artist>?>.value(),
          )
          as _i7.Future<List<_i3.Artist>?>);

  @override
  _i7.Future<void> cacheCollectionsForOffline(
    List<_i4.Collection>? collections,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#cacheCollectionsForOffline, [collections]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i4.Collection>?> getCachedCollections() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedCollections, []),
            returnValue: _i7.Future<List<_i4.Collection>?>.value(),
          )
          as _i7.Future<List<_i4.Collection>?>);

  @override
  _i7.Future<bool> hasOfflineData() =>
      (super.noSuchMethod(
            Invocation.method(#hasOfflineData, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<DateTime?> getLastSyncTime() =>
      (super.noSuchMethod(
            Invocation.method(#getLastSyncTime, []),
            returnValue: _i7.Future<DateTime?>.value(),
          )
          as _i7.Future<DateTime?>);

  @override
  _i7.Future<void> clearOfflineData() =>
      (super.noSuchMethod(
            Invocation.method(#clearOfflineData, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  bool shouldUseOfflineData() =>
      (super.noSuchMethod(
            Invocation.method(#shouldUseOfflineData, []),
            returnValue: false,
          )
          as bool);

  @override
  String getOfflineStatusMessage() =>
      (super.noSuchMethod(
            Invocation.method(#getOfflineStatusMessage, []),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#getOfflineStatusMessage, []),
            ),
          )
          as String);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LikedSongsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLikedSongsService extends _i1.Mock implements _i10.LikedSongsService {
  MockLikedSongsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i2.Song>> getLikedSongs({bool? forceSync = false}) =>
      (super.noSuchMethod(
            Invocation.method(#getLikedSongs, [], {#forceSync: forceSync}),
            returnValue: _i7.Future<List<_i2.Song>>.value(<_i2.Song>[]),
          )
          as _i7.Future<List<_i2.Song>>);

  @override
  _i7.Future<bool> likeSong(_i2.Song? song) =>
      (super.noSuchMethod(
            Invocation.method(#likeSong, [song]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> unlikeSong(_i2.Song? song) =>
      (super.noSuchMethod(
            Invocation.method(#unlikeSong, [song]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> toggleLike(_i2.Song? song) =>
      (super.noSuchMethod(
            Invocation.method(#toggleLike, [song]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> isSongLiked(String? songId) =>
      (super.noSuchMethod(
            Invocation.method(#isSongLiked, [songId]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> syncAfterLogin() =>
      (super.noSuchMethod(
            Invocation.method(#syncAfterLogin, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> clearLocalDataOnLogout({bool? forceFullClear = false}) =>
      (super.noSuchMethod(
            Invocation.method(#clearLocalDataOnLogout, [], {
              #forceFullClear: forceFullClear,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [CacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheService extends _i1.Mock implements _i11.CacheService {
  MockCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  bool shouldUseCacheForSession() =>
      (super.noSuchMethod(
            Invocation.method(#shouldUseCacheForSession, []),
            returnValue: false,
          )
          as bool);

  @override
  _i7.Future<void> clearAllCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllCache, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> cacheSongs(List<_i2.Song>? songs) =>
      (super.noSuchMethod(
            Invocation.method(#cacheSongs, [songs]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i2.Song>?> getCachedSongs() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedSongs, []),
            returnValue: _i7.Future<List<_i2.Song>?>.value(),
          )
          as _i7.Future<List<_i2.Song>?>);

  @override
  _i7.Future<void> cacheArtists(List<_i3.Artist>? artists) =>
      (super.noSuchMethod(
            Invocation.method(#cacheArtists, [artists]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i3.Artist>?> getCachedArtists() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedArtists, []),
            returnValue: _i7.Future<List<_i3.Artist>?>.value(),
          )
          as _i7.Future<List<_i3.Artist>?>);

  @override
  _i7.Future<void> cacheSeasonalCollections(
    List<_i4.Collection>? collections,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#cacheSeasonalCollections, [collections]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i4.Collection>?> getCachedSeasonalCollections() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedSeasonalCollections, []),
            returnValue: _i7.Future<List<_i4.Collection>?>.value(),
          )
          as _i7.Future<List<_i4.Collection>?>);

  @override
  _i7.Future<void> cacheBeginnerCollections(
    List<_i4.Collection>? collections,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#cacheBeginnerCollections, [collections]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i4.Collection>?> getCachedBeginnerCollections() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedBeginnerCollections, []),
            returnValue: _i7.Future<List<_i4.Collection>?>.value(),
          )
          as _i7.Future<List<_i4.Collection>?>);

  @override
  _i7.Future<void> cacheTrendingSongs(List<_i2.Song>? songs) =>
      (super.noSuchMethod(
            Invocation.method(#cacheTrendingSongs, [songs]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i2.Song>?> getCachedTrendingSongs() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedTrendingSongs, []),
            returnValue: _i7.Future<List<_i2.Song>?>.value(),
          )
          as _i7.Future<List<_i2.Song>?>);

  @override
  _i7.Future<void> cacheTopArtists(List<_i3.Artist>? artists) =>
      (super.noSuchMethod(
            Invocation.method(#cacheTopArtists, [artists]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i3.Artist>?> getCachedTopArtists() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedTopArtists, []),
            returnValue: _i7.Future<List<_i3.Artist>?>.value(),
          )
          as _i7.Future<List<_i3.Artist>?>);

  @override
  _i7.Future<void> cacheNewSongs(List<_i2.Song>? songs) =>
      (super.noSuchMethod(
            Invocation.method(#cacheNewSongs, [songs]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i2.Song>?> getCachedNewSongs() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedNewSongs, []),
            returnValue: _i7.Future<List<_i2.Song>?>.value(),
          )
          as _i7.Future<List<_i2.Song>?>);

  @override
  _i7.Future<void> cacheHomeSections(List<dynamic>? sections) =>
      (super.noSuchMethod(
            Invocation.method(#cacheHomeSections, [sections]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<dynamic>?> getCachedHomeSections() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedHomeSections, []),
            returnValue: _i7.Future<List<dynamic>?>.value(),
          )
          as _i7.Future<List<dynamic>?>);

  @override
  _i7.Future<bool> isCacheStale(String? cacheKey, int? maxAgeMinutes) =>
      (super.noSuchMethod(
            Invocation.method(#isCacheStale, [cacheKey, maxAgeMinutes]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> cacheBannerImages(List<String>? imageUrls) =>
      (super.noSuchMethod(
            Invocation.method(#cacheBannerImages, [imageUrls]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<String>?> getCachedBannerImages() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedBannerImages, []),
            returnValue: _i7.Future<List<String>?>.value(),
          )
          as _i7.Future<List<String>?>);

  @override
  _i7.Future<bool> haveBannerImagesChanged(List<String>? newImageUrls) =>
      (super.noSuchMethod(
            Invocation.method(#haveBannerImagesChanged, [newImageUrls]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> set(String? key, String? data) =>
      (super.noSuchMethod(
            Invocation.method(#set, [key, data]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String?> get(String? key, {int? expirationMinutes = 30}) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [key],
              {#expirationMinutes: expirationMinutes},
            ),
            returnValue: _i7.Future<String?>.value(),
          )
          as _i7.Future<String?>);

  @override
  _i7.Future<void> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> cacheSetlists(List<_i5.Setlist>? setlists) =>
      (super.noSuchMethod(
            Invocation.method(#cacheSetlists, [setlists]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i5.Setlist>?> getCachedSetlists() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedSetlists, []),
            returnValue: _i7.Future<List<_i5.Setlist>?>.value(),
          )
          as _i7.Future<List<_i5.Setlist>?>);

  @override
  _i7.Future<void> cacheLikedSongs(List<_i2.Song>? likedSongs) =>
      (super.noSuchMethod(
            Invocation.method(#cacheLikedSongs, [likedSongs]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i2.Song>?> getCachedLikedSongs() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedLikedSongs, []),
            returnValue: _i7.Future<List<_i2.Song>?>.value(),
          )
          as _i7.Future<List<_i2.Song>?>);

  @override
  _i7.Future<void> clearSetlistCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearSetlistCache, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [SongService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSongService extends _i1.Mock implements _i12.SongService {
  MockSongService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<Map<String, dynamic>> getPaginatedSongs({
    int? page = 1,
    int? limit = 20,
    String? search,
    String? artistId,
    String? tags,
    String? sortBy,
    String? sortOrder,
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPaginatedSongs, [], {
              #page: page,
              #limit: limit,
              #search: search,
              #artistId: artistId,
              #tags: tags,
              #sortBy: sortBy,
              #sortOrder: sortOrder,
              #forceRefresh: forceRefresh,
            }),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<List<_i2.Song>> getAllSongs({bool? forceRefresh = false}) =>
      (super.noSuchMethod(
            Invocation.method(#getAllSongs, [], {#forceRefresh: forceRefresh}),
            returnValue: _i7.Future<List<_i2.Song>>.value(<_i2.Song>[]),
          )
          as _i7.Future<List<_i2.Song>>);

  @override
  _i7.Future<List<_i2.Song>> searchSongs(
    String? query, {
    _i13.SongSearchFilters? filters,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchSongs, [query], {#filters: filters}),
            returnValue: _i7.Future<List<_i2.Song>>.value(<_i2.Song>[]),
          )
          as _i7.Future<List<_i2.Song>>);

  @override
  _i7.Future<List<_i2.Song>> getSongsByArtist(String? artistId) =>
      (super.noSuchMethod(
            Invocation.method(#getSongsByArtist, [artistId]),
            returnValue: _i7.Future<List<_i2.Song>>.value(<_i2.Song>[]),
          )
          as _i7.Future<List<_i2.Song>>);

  @override
  _i7.Future<_i2.Song> getSongById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getSongById, [id]),
            returnValue: _i7.Future<_i2.Song>.value(
              _FakeSong_0(this, Invocation.method(#getSongById, [id])),
            ),
          )
          as _i7.Future<_i2.Song>);

  @override
  _i7.Future<bool> toggleLikeSong(String? songId, bool? isLiked) =>
      (super.noSuchMethod(
            Invocation.method(#toggleLikeSong, [songId, isLiked]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<List<_i2.Song>> getSongsByArtistName(String? artistName) =>
      (super.noSuchMethod(
            Invocation.method(#getSongsByArtistName, [artistName]),
            returnValue: _i7.Future<List<_i2.Song>>.value(<_i2.Song>[]),
          )
          as _i7.Future<List<_i2.Song>>);

  @override
  _i7.Future<Map<String, int>> countSongsByArtist() =>
      (super.noSuchMethod(
            Invocation.method(#countSongsByArtist, []),
            returnValue: _i7.Future<Map<String, int>>.value(<String, int>{}),
          )
          as _i7.Future<Map<String, int>>);
}

/// A class which mocks [ArtistService].
///
/// See the documentation for Mockito's code generation for more information.
class MockArtistService extends _i1.Mock implements _i14.ArtistService {
  MockArtistService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i3.Artist>> getAllArtists({bool? forceRefresh = false}) =>
      (super.noSuchMethod(
            Invocation.method(#getAllArtists, [], {
              #forceRefresh: forceRefresh,
            }),
            returnValue: _i7.Future<List<_i3.Artist>>.value(<_i3.Artist>[]),
          )
          as _i7.Future<List<_i3.Artist>>);

  @override
  _i7.Future<List<_i3.Artist>> searchArtists(
    String? query, {
    _i13.ArtistSearchFilters? filters,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchArtists, [query], {#filters: filters}),
            returnValue: _i7.Future<List<_i3.Artist>>.value(<_i3.Artist>[]),
          )
          as _i7.Future<List<_i3.Artist>>);

  @override
  _i7.Future<_i3.Artist> getArtistById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getArtistById, [id]),
            returnValue: _i7.Future<_i3.Artist>.value(
              _FakeArtist_1(this, Invocation.method(#getArtistById, [id])),
            ),
          )
          as _i7.Future<_i3.Artist>);

  @override
  _i7.Future<_i3.Artist?> getArtistByName(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getArtistByName, [name]),
            returnValue: _i7.Future<_i3.Artist?>.value(),
          )
          as _i7.Future<_i3.Artist?>);
}

/// A class which mocks [CollectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollectionService extends _i1.Mock implements _i15.CollectionService {
  MockCollectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<Map<String, dynamic>> toggleLike(String? collectionId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleLike, [collectionId]),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<Map<String, dynamic>> getLikeStatus(String? collectionId) =>
      (super.noSuchMethod(
            Invocation.method(#getLikeStatus, [collectionId]),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<List<_i4.Collection>> getLikedCollections() =>
      (super.noSuchMethod(
            Invocation.method(#getLikedCollections, []),
            returnValue: _i7.Future<List<_i4.Collection>>.value(
              <_i4.Collection>[],
            ),
          )
          as _i7.Future<List<_i4.Collection>>);

  @override
  _i7.Future<List<_i4.Collection>> getAllCollections({int? limit}) =>
      (super.noSuchMethod(
            Invocation.method(#getAllCollections, [], {#limit: limit}),
            returnValue: _i7.Future<List<_i4.Collection>>.value(
              <_i4.Collection>[],
            ),
          )
          as _i7.Future<List<_i4.Collection>>);

  @override
  _i7.Future<List<_i4.Collection>> searchCollections(
    String? query, {
    int? limit,
    _i13.CollectionSearchFilters? filters,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #searchCollections,
              [query],
              {#limit: limit, #filters: filters},
            ),
            returnValue: _i7.Future<List<_i4.Collection>>.value(
              <_i4.Collection>[],
            ),
          )
          as _i7.Future<List<_i4.Collection>>);

  @override
  _i7.Future<_i4.Collection> getCollectionById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getCollectionById, [id]),
            returnValue: _i7.Future<_i4.Collection>.value(
              _FakeCollection_2(
                this,
                Invocation.method(#getCollectionById, [id]),
              ),
            ),
          )
          as _i7.Future<_i4.Collection>);

  @override
  _i7.Future<List<_i4.Collection>> getFeaturedCollections({int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getFeaturedCollections, [], {#limit: limit}),
            returnValue: _i7.Future<List<_i4.Collection>>.value(
              <_i4.Collection>[],
            ),
          )
          as _i7.Future<List<_i4.Collection>>);

  @override
  _i7.Future<List<_i4.Collection>> getSeasonalCollections({
    int? limit = 10,
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getSeasonalCollections, [], {
              #limit: limit,
              #forceRefresh: forceRefresh,
            }),
            returnValue: _i7.Future<List<_i4.Collection>>.value(
              <_i4.Collection>[],
            ),
          )
          as _i7.Future<List<_i4.Collection>>);

  @override
  _i7.Future<List<_i4.Collection>> getBeginnerFriendlyCollections({
    int? limit = 10,
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getBeginnerFriendlyCollections, [], {
              #limit: limit,
              #forceRefresh: forceRefresh,
            }),
            returnValue: _i7.Future<List<_i4.Collection>>.value(
              <_i4.Collection>[],
            ),
          )
          as _i7.Future<List<_i4.Collection>>);

  @override
  _i7.Future<_i4.Collection?> getCollectionByName(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getCollectionByName, [name]),
            returnValue: _i7.Future<_i4.Collection?>.value(),
          )
          as _i7.Future<_i4.Collection?>);

  @override
  _i7.Future<List<dynamic>> getSongsInCollection(String? collectionId) =>
      (super.noSuchMethod(
            Invocation.method(#getSongsInCollection, [collectionId]),
            returnValue: _i7.Future<List<dynamic>>.value(<dynamic>[]),
          )
          as _i7.Future<List<dynamic>>);
}

/// A class which mocks [SetlistService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetlistService extends _i1.Mock implements _i16.SetlistService {
  MockSetlistService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> isAuthenticated() =>
      (super.noSuchMethod(
            Invocation.method(#isAuthenticated, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<List<_i5.Setlist>> getSetlists() =>
      (super.noSuchMethod(
            Invocation.method(#getSetlists, []),
            returnValue: _i7.Future<List<_i5.Setlist>>.value(<_i5.Setlist>[]),
          )
          as _i7.Future<List<_i5.Setlist>>);

  @override
  _i7.Future<_i5.Setlist> createSetlist(String? name, {String? description}) =>
      (super.noSuchMethod(
            Invocation.method(
              #createSetlist,
              [name],
              {#description: description},
            ),
            returnValue: _i7.Future<_i5.Setlist>.value(
              _FakeSetlist_3(
                this,
                Invocation.method(
                  #createSetlist,
                  [name],
                  {#description: description},
                ),
              ),
            ),
          )
          as _i7.Future<_i5.Setlist>);

  @override
  _i7.Future<_i5.Setlist> getSetlist(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getSetlist, [id]),
            returnValue: _i7.Future<_i5.Setlist>.value(
              _FakeSetlist_3(this, Invocation.method(#getSetlist, [id])),
            ),
          )
          as _i7.Future<_i5.Setlist>);

  @override
  _i7.Future<_i5.Setlist> updateSetlist(
    String? id,
    String? name, {
    String? description,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateSetlist,
              [id, name],
              {#description: description},
            ),
            returnValue: _i7.Future<_i5.Setlist>.value(
              _FakeSetlist_3(
                this,
                Invocation.method(
                  #updateSetlist,
                  [id, name],
                  {#description: description},
                ),
              ),
            ),
          )
          as _i7.Future<_i5.Setlist>);

  @override
  _i7.Future<void> deleteSetlist(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSetlist, [id]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<Map<String, dynamic>> shareSetlist(
    String? setlistId,
    String? email,
    String? permission,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#shareSetlist, [setlistId, email, permission]),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<_i5.Setlist> acceptInvitation(String? shareCode) =>
      (super.noSuchMethod(
            Invocation.method(#acceptInvitation, [shareCode]),
            returnValue: _i7.Future<_i5.Setlist>.value(
              _FakeSetlist_3(
                this,
                Invocation.method(#acceptInvitation, [shareCode]),
              ),
            ),
          )
          as _i7.Future<_i5.Setlist>);

  @override
  _i7.Future<List<Map<String, dynamic>>> getCollaborators(String? setlistId) =>
      (super.noSuchMethod(
            Invocation.method(#getCollaborators, [setlistId]),
            returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<Map<String, dynamic>> updateCollaborator(
    String? setlistId,
    String? collaboratorId,
    String? permission,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateCollaborator, [
              setlistId,
              collaboratorId,
              permission,
            ]),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<void> removeCollaborator(
    String? setlistId,
    String? collaboratorId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeCollaborator, [setlistId, collaboratorId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<Map<String, dynamic>>> getActivities(
    String? setlistId, {
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getActivities, [setlistId], {#limit: limit}),
            returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<Map<String, dynamic>> addComment(
    String? setlistId,
    String? text, {
    String? parentId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addComment,
              [setlistId, text],
              {#parentId: parentId},
            ),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<List<Map<String, dynamic>>> getComments(String? setlistId) =>
      (super.noSuchMethod(
            Invocation.method(#getComments, [setlistId]),
            returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<void> reorderSongs(String? setlistId, List<String>? songIds) =>
      (super.noSuchMethod(
            Invocation.method(#reorderSongs, [setlistId, songIds]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i5.Setlist> syncSetlist(
    String? setlistId,
    Map<String, dynamic>? changes,
    int? currentVersion,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#syncSetlist, [
              setlistId,
              changes,
              currentVersion,
            ]),
            returnValue: _i7.Future<_i5.Setlist>.value(
              _FakeSetlist_3(
                this,
                Invocation.method(#syncSetlist, [
                  setlistId,
                  changes,
                  currentVersion,
                ]),
              ),
            ),
          )
          as _i7.Future<_i5.Setlist>);

  @override
  _i7.Future<_i5.Setlist> updateSettings(
    String? setlistId,
    Map<String, dynamic>? settings,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateSettings, [setlistId, settings]),
            returnValue: _i7.Future<_i5.Setlist>.value(
              _FakeSetlist_3(
                this,
                Invocation.method(#updateSettings, [setlistId, settings]),
              ),
            ),
          )
          as _i7.Future<_i5.Setlist>);

  @override
  _i7.Future<List<_i5.Setlist>> getSharedSetlists() =>
      (super.noSuchMethod(
            Invocation.method(#getSharedSetlists, []),
            returnValue: _i7.Future<List<_i5.Setlist>>.value(<_i5.Setlist>[]),
          )
          as _i7.Future<List<_i5.Setlist>>);

  @override
  _i7.Future<void> forceClearAllCaches() =>
      (super.noSuchMethod(
            Invocation.method(#forceClearAllCaches, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> saveSetlistOffline(_i5.Setlist? setlist) =>
      (super.noSuchMethod(
            Invocation.method(#saveSetlistOffline, [setlist]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i5.Setlist?> getOfflineSetlist(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getOfflineSetlist, [id]),
            returnValue: _i7.Future<_i5.Setlist?>.value(),
          )
          as _i7.Future<_i5.Setlist?>);

  @override
  _i7.Future<List<_i5.Setlist>> getAllOfflineSetlists() =>
      (super.noSuchMethod(
            Invocation.method(#getAllOfflineSetlists, []),
            returnValue: _i7.Future<List<_i5.Setlist>>.value(<_i5.Setlist>[]),
          )
          as _i7.Future<List<_i5.Setlist>>);

  @override
  _i7.Future<void> deleteOfflineSetlist(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteOfflineSetlist, [id]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> addSongToSetlist(String? setlistId, String? songId) =>
      (super.noSuchMethod(
            Invocation.method(#addSongToSetlist, [setlistId, songId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> addMultipleSongsToSetlist(
    String? setlistId,
    List<String>? songIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addMultipleSongsToSetlist, [setlistId, songIds]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> removeSongFromSetlist(String? setlistId, String? songId) =>
      (super.noSuchMethod(
            Invocation.method(#removeSongFromSetlist, [setlistId, songId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> removeMultipleSongsFromSetlist(
    String? setlistId,
    List<String>? songIds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeMultipleSongsFromSetlist, [
              setlistId,
              songIds,
            ]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> isSongInSetlist(String? setlistId, String? songId) =>
      (super.noSuchMethod(
            Invocation.method(#isSongInSetlist, [setlistId, songId]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<_i5.Setlist> getSetlistById(String? setlistId) =>
      (super.noSuchMethod(
            Invocation.method(#getSetlistById, [setlistId]),
            returnValue: _i7.Future<_i5.Setlist>.value(
              _FakeSetlist_3(
                this,
                Invocation.method(#getSetlistById, [setlistId]),
              ),
            ),
          )
          as _i7.Future<_i5.Setlist>);

  @override
  _i7.Future<_i5.Setlist> updateSetlistSettings(
    String? setlistId, {
    bool? isPublic,
    bool? allowEditing,
    bool? allowComments,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateSetlistSettings,
              [setlistId],
              {
                #isPublic: isPublic,
                #allowEditing: allowEditing,
                #allowComments: allowComments,
              },
            ),
            returnValue: _i7.Future<_i5.Setlist>.value(
              _FakeSetlist_3(
                this,
                Invocation.method(
                  #updateSetlistSettings,
                  [setlistId],
                  {
                    #isPublic: isPublic,
                    #allowEditing: allowEditing,
                    #allowComments: allowComments,
                  },
                ),
              ),
            ),
          )
          as _i7.Future<_i5.Setlist>);

  @override
  _i7.Future<_i5.Setlist> getSetlistByShareCode(String? shareCode) =>
      (super.noSuchMethod(
            Invocation.method(#getSetlistByShareCode, [shareCode]),
            returnValue: _i7.Future<_i5.Setlist>.value(
              _FakeSetlist_3(
                this,
                Invocation.method(#getSetlistByShareCode, [shareCode]),
              ),
            ),
          )
          as _i7.Future<_i5.Setlist>);

  @override
  _i7.Future<void> joinSetlist(String? shareCode) =>
      (super.noSuchMethod(
            Invocation.method(#joinSetlist, [shareCode]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}
